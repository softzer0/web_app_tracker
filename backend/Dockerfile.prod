###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.6-slim-buster as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN pip install --upgrade pip
COPY backend/requirements.txt backend/requirements.prod.txt ./
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.prod.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.8.6-slim-buster

# install psycopg2 dependencies
RUN set -ex; \
        if ! command -v gpg > /dev/null; then \
                apt-get update; \
                apt-get install -y --no-install-recommends \
                        gnupg \
                        dirmngr \
                ; \
                rm -rf /var/lib/apt/lists/*; \
        fi
RUN set -ex; \
# pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]
#       Key fingerprint = B97B 0AFC AA1A 47F0 44F2  44A0 7FCC 7D46 ACCC 4CF8
# uid                  PostgreSQL Debian Repository
        key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \
        export GNUPGHOME="$(mktemp -d)"; \
        gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
        gpg --batch --export "$key" > /etc/apt/trusted.gpg.d/postgres.gpg; \
        rm -rf "$GNUPGHOME"; \
        apt-key list
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main $PG_MAJOR" > /etc/apt/sources.list.d/pgdg.list
RUN set -ex \
    && buildDeps=" \
       build-essential \
       libpq-dev \
    " \
    && deps=" \
       gdal-bin \
       gettext \
       postgresql-client \
    " \
    && apt-get update && apt-get install -y $buildDeps $deps --no-install-recommends \
    && apt-get purge -y --auto-remove $buildDeps \
       $(! command -v gpg > /dev/null || echo 'gnupg dirmngr') \
    && rm -rf /var/lib/apt/lists/*

# create directory for the app user
#RUN mkdir -p /home/app

# create the app user
#RUN addgroup app && useradd -g app app

# create the appropriate directories
RUN touch /var/log/error_file_g.log
#RUN chown app:app /var/log/error_file_g.log
ENV HOME=/home/root
ENV APP_HOME=/home/root/backend
RUN mkdir -p $APP_HOME/static
WORKDIR $APP_HOME

# install dependencies
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements*.txt ./
RUN pip install --no-cache /wheels/*

# copy project
COPY wait-for-it.sh $HOME

# chown all the files to the app user
#RUN chown -R app:app $APP_HOME

# change to the app user
#USER app
